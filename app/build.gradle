apply plugin: 'com.android.application'


def Properties props = new Properties()
def propsTemplateDir = rootProject.file("templates")
def localPropsDir = rootProject.file("private")
def propFile = file("${localPropsDir.path}/secure.properties")

/*  Initializes local secure properties files */
task copyTemplates(type: Copy){
    def srcDir = propsTemplateDir
    def destination = localPropsDir
    description = "copying local properties files"
    if(!localPropsDir.exists()){
        def created = localPropsDir.mkdir()
        println "${project.name}:TEMPLATES...created local config directory: ${created}"
    } else {
        println "${project.name}:TEMPLATES...local config directory ${localPropsDir.path} exists."
    }
    println "${this.name}:TEMPLATES...preparing to copy templates"
    duplicatesStrategy 'exclude'
    from srcDir
    into destination
    eachFile {
        if (it.getRelativePath().getFile(destination).exists()) {
            it.exclude()
            println "${project.name}:TEMPLATES...WARNING! ${it.file.name} exists! Check against template!"
        }
    }
    println "${project.name}:TEMPLATES...template file initialization complete"
}

def storepass = '';
def keypass = '';
def debugHost = '';
def releaseHost = '';
def keyClientAPI = '';
def keyClientAPIRelease = '';
// Reads the store password and key password from properties file
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))
    if (props!=null){
        if(props.containsKey('store.password')) {
            storepass = props['store.password']
        }
        if(props.containsKey('key.password')) {
            keypass = props['key.password']
        }
        if(props.containsKey('debug.host')) {
            debugHost = props['debug.host']
        }
        if(props.containsKey('release.host')) {
            releaseHost = props['release.host']
        }
        if(props.containsKey('key.clients.api')) {
            keyClientAPI = props['key.clients.api']
        }
        if(props.containsKey('key.clients.api.release')) {
            keyClientAPIRelease = props['key.clients.api.release']
        }
    } else {
        println "...WARN couldn't read props file!";
    }
} else {
    println "...WARNING! Check ${propFile.path} exists and update";
}
android {
    signingConfigs {
        release {
            keyAlias 'getin-release'
            keyPassword keypass
            storeFile file('../project.jks')
            storePassword storepass
        }
        dev {
            keyAlias 'getin-dev'
            keyPassword keypass
            storeFile file('../project.jks')
            storePassword storepass
        }
    }
    compileSdkVersion 23
    buildToolsVersion "23.0.3"
    compileOptions {
        encoding "UTF-8"
    }
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        applicationId "org.sana.android"
        minSdkVersion 11
        targetSdkVersion 17
        versionCode 11
        versionName '2.1.0'
        resValue('string', 'key_clients_api', keyClientAPI)
        resValue('bool', 'debug', 'false')
        resValue('bool', 'debug_credentials', 'false')
    }
    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.dev
            resValue('string', 'host_mds', debugHost)
            resValue('string', 'key_clients_api', keyClientAPI)
            resValue('bool', 'debug', 'true')
            resValue('bool', 'debug_credentials', 'true')
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            resValue('string', 'host_mds', releaseHost)
            resValue('string', 'key_clients_api', keyClientAPIRelease)
        }
    }
    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/test/java', 'src/test/java/2']
        }
        vht { res.srcDirs = ['src/vht/res', 'src/vht/res/'] }
    }
    productFlavors {
        vht {
            minSdkVersion 11
            targetSdkVersion 17
            versionCode 11
            versionName '2.1.0-chew'
        }
        midwife {
            minSdkVersion 11
            targetSdkVersion 17
            versionCode 11
            versionName '2.1.0-midwife'
        }
    }
}

dependencies {
    compile project(':api')
    compile project(':api-android')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.android.support:support-annotations:23.4.0'
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.android.support.test:rules:0.4.1'
    compile 'com.android.support:support-v4:23.4.0'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.google.code.gson:gson:2.4'
    compile 'org.apache.commons:commons-lang3:3.0'
    compile 'commons-codec:commons-codec:1.9'
    compile 'org.apache.httpcomponents:httpcore:4.3.3'
    compile 'org.apache.httpcomponents:httpmime:4.3.5'
}



project.afterEvaluate {
    println "execute -> copyTemplates"
    preBuild.dependsOn copyTemplates
}
